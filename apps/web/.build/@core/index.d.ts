export { apiHandler } from '@core/api/api.helper';
export { apiDelete, apiFetch, apiGet, apiPatch, apiPost, apiPut } from '@core/api/api.service';
export { toFindParams } from '@core/entity/entity';
export type { FindParams, FindWhereParams, IEntity, IEquatable, ILocalizedString, INamedEntity, IQuerable, ISchema } from '@core/entity/entity';
export { fsExistOrCreateFolder, fsExists, fsRead, fsReadJson, fsWrite, fsWriteJson, pathJoin } from '@core/fs/fs.service';
export { httpDelete, httpFetch, httpGet, httpPatch, httpPost, httpPut } from '@core/http/http.service';
export type { FetchRequestOptions, FetchService } from '@core/http/http.service';
export { default as JsonService } from '@core/json/json.service';
export { isApiRequest, isExistingApiRoute, isStaticRequest } from '@core/middleware/middleware.service';
export { parseMockApi, resolveMockApi } from '@core/mock/mock.api';
export { mockInterceptor } from '@core/mock/mock.interceptor';
export { default as MockService } from '@core/mock/mock.service';
export { getMockStore } from '@core/mock/mock.store';
export { default as StoreApiService, storeDelete, storeFetch, storeGet, storePatch, storePost, storePut } from '@core/store-api/store-api.service';
export { getApiStore } from '@core/store-api/store-api.store';
export { StoreStrategy, storeStrategy } from '@core/store/store';
export type { CollectionDescription, SerializedCollection, SerializedStore, Store } from '@core/store/store';
export { getStore } from '@core/store/store.service';
export * from '@core/utils';
//# sourceMappingURL=index.d.ts.map